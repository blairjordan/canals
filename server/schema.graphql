"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItemFilter
  ): ItemsConnection

  """Reads and enables pagination through a set of `Link`."""
  links(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Link`."""
    orderBy: [LinksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkFilter
  ): LinksConnection

  """Reads and enables pagination through a set of `LinksRecursive`."""
  linksRecursives(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LinksRecursive`."""
    orderBy: [LinksRecursivesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinksRecursiveCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinksRecursiveFilter
  ): LinksRecursivesConnection

  """Reads and enables pagination through a set of `MarkerItem`."""
  markerItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MarkerItem`."""
    orderBy: [MarkerItemsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MarkerItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MarkerItemFilter
  ): MarkerItemsConnection

  """Reads and enables pagination through a set of `Marker`."""
  markers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Marker`."""
    orderBy: [MarkersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MarkerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MarkerFilter
  ): MarkersConnection

  """Reads and enables pagination through a set of `Message`."""
  messages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection

  """Reads and enables pagination through a set of `PlayerItem`."""
  playerItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PlayerItem`."""
    orderBy: [PlayerItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlayerItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlayerItemFilter
  ): PlayerItemsConnection

  """Reads and enables pagination through a set of `Player`."""
  players(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlayerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlayerFilter
  ): PlayersConnection
  item(id: BigInt!): Item
  link(id: BigInt!): Link
  linkByFromMarkerIdAndToMarkerId(fromMarkerId: BigInt!, toMarkerId: BigInt!): Link
  marker(id: BigInt!): Marker
  message(id: BigInt!): Message
  playerItem(id: BigInt!): PlayerItem
  player(id: BigInt!): Player

  """Reads and enables pagination through a set of `NearbyPlayer`."""
  nearbyPlayers(
    currentPlayerId: Int
    distance: Float

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NearbyPlayerFilter
  ): NearbyPlayersConnection

  """Reads a single `Item` using its globally unique `ID`."""
  itemByNodeId(
    """The globally unique `ID` to be used in selecting a single `Item`."""
    nodeId: ID!
  ): Item

  """Reads a single `Link` using its globally unique `ID`."""
  linkByNodeId(
    """The globally unique `ID` to be used in selecting a single `Link`."""
    nodeId: ID!
  ): Link

  """Reads a single `Marker` using its globally unique `ID`."""
  markerByNodeId(
    """The globally unique `ID` to be used in selecting a single `Marker`."""
    nodeId: ID!
  ): Marker

  """Reads a single `Message` using its globally unique `ID`."""
  messageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Message`."""
    nodeId: ID!
  ): Message

  """Reads a single `PlayerItem` using its globally unique `ID`."""
  playerItemByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PlayerItem`.
    """
    nodeId: ID!
  ): PlayerItem

  """Reads a single `Player` using its globally unique `ID`."""
  playerByNodeId(
    """The globally unique `ID` to be used in selecting a single `Player`."""
    nodeId: ID!
  ): Player
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Item` values."""
type ItemsConnection {
  """A list of `Item` objects."""
  nodes: [Item!]!

  """
  A list of edges which contains the `Item` and cursor to aid in pagination.
  """
  edges: [ItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Item` you could get from the connection."""
  totalCount: Int!
}

type Item implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  itemKey: String!
  name: String!
  type: String
  description: String
  price: BigFloat
  props: JSON

  """Reads and enables pagination through a set of `MarkerItem`."""
  markerItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MarkerItem`."""
    orderBy: [MarkerItemsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MarkerItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MarkerItemFilter
  ): MarkerItemsConnection!

  """Reads and enables pagination through a set of `PlayerItem`."""
  playerItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PlayerItem`."""
    orderBy: [PlayerItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlayerItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlayerItemFilter
  ): PlayerItemsConnection!
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""A connection to a list of `MarkerItem` values."""
type MarkerItemsConnection {
  """A list of `MarkerItem` objects."""
  nodes: [MarkerItem!]!

  """
  A list of edges which contains the `MarkerItem` and cursor to aid in pagination.
  """
  edges: [MarkerItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MarkerItem` you could get from the connection."""
  totalCount: Int!
}

type MarkerItem {
  markerId: BigInt!
  itemId: BigInt!
  props: JSON

  """Reads a single `Marker` that is related to this `MarkerItem`."""
  marker: Marker

  """Reads a single `Item` that is related to this `MarkerItem`."""
  item: Item
}

type Marker implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  position: JSON!
  radius: BigFloat!
  type: String
  props: JSON

  """Reads and enables pagination through a set of `Link`."""
  linksByFromMarkerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Link`."""
    orderBy: [LinksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkFilter
  ): LinksConnection!

  """Reads and enables pagination through a set of `Link`."""
  linksByToMarkerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Link`."""
    orderBy: [LinksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkFilter
  ): LinksConnection!

  """Reads and enables pagination through a set of `MarkerItem`."""
  markerItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MarkerItem`."""
    orderBy: [MarkerItemsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MarkerItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MarkerItemFilter
  ): MarkerItemsConnection!

  """Reads and enables pagination through a set of `LinksRecursive`."""
  toMarker(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LinksRecursive`."""
    orderBy: [LinksRecursivesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinksRecursiveCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinksRecursiveFilter
  ): LinksRecursivesConnection!

  """Reads and enables pagination through a set of `LinksRecursive`."""
  fromMarker(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LinksRecursive`."""
    orderBy: [LinksRecursivesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinksRecursiveCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinksRecursiveFilter
  ): LinksRecursivesConnection!

  """Reads and enables pagination through a set of `MarkerItem`."""
  packages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MarkerItemFilter
  ): MarkerItemsConnection!
}

"""A connection to a list of `Link` values."""
type LinksConnection {
  """A list of `Link` objects."""
  nodes: [Link!]!

  """
  A list of edges which contains the `Link` and cursor to aid in pagination.
  """
  edges: [LinksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Link` you could get from the connection."""
  totalCount: Int!
}

type Link implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  fromMarkerId: BigInt!
  toMarkerId: BigInt!
  props: JSON

  """Reads a single `Marker` that is related to this `Link`."""
  fromMarker: Marker

  """Reads a single `Marker` that is related to this `Link`."""
  toMarker: Marker
}

"""A `Link` edge in the connection."""
type LinksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Link` at the end of the edge."""
  node: Link!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Link`."""
enum LinksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FROM_MARKER_ID_ASC
  FROM_MARKER_ID_DESC
  TO_MARKER_ID_ASC
  TO_MARKER_ID_DESC
  PROPS_ASC
  PROPS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Link` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LinkCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `fromMarkerId` field."""
  fromMarkerId: BigInt

  """Checks for equality with the object’s `toMarkerId` field."""
  toMarkerId: BigInt

  """Checks for equality with the object’s `props` field."""
  props: JSON
}

"""
A filter to be used against `Link` object types. All fields are combined with a logical ‘and.’
"""
input LinkFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `fromMarkerId` field."""
  fromMarkerId: BigIntFilter

  """Filter by the object’s `toMarkerId` field."""
  toMarkerId: BigIntFilter

  """Filter by the object’s `props` field."""
  props: JSONFilter

  """Checks for all expressions in this list."""
  and: [LinkFilter!]

  """Checks for any expressions in this list."""
  or: [LinkFilter!]

  """Negates the expression."""
  not: LinkFilter
}

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """Not included in the specified list."""
  notIn: [BigInt!]

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt
}

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON
}

"""Methods to use when ordering `MarkerItem`."""
enum MarkerItemsOrderBy {
  NATURAL
  MARKER_ID_ASC
  MARKER_ID_DESC
  ITEM_ID_ASC
  ITEM_ID_DESC
  PROPS_ASC
  PROPS_DESC
}

"""
A condition to be used against `MarkerItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MarkerItemCondition {
  """Checks for equality with the object’s `markerId` field."""
  markerId: BigInt

  """Checks for equality with the object’s `itemId` field."""
  itemId: BigInt

  """Checks for equality with the object’s `props` field."""
  props: JSON
}

"""
A filter to be used against `MarkerItem` object types. All fields are combined with a logical ‘and.’
"""
input MarkerItemFilter {
  """Filter by the object’s `markerId` field."""
  markerId: BigIntFilter

  """Filter by the object’s `itemId` field."""
  itemId: BigIntFilter

  """Filter by the object’s `props` field."""
  props: JSONFilter

  """Checks for all expressions in this list."""
  and: [MarkerItemFilter!]

  """Checks for any expressions in this list."""
  or: [MarkerItemFilter!]

  """Negates the expression."""
  not: MarkerItemFilter
}

"""A connection to a list of `LinksRecursive` values."""
type LinksRecursivesConnection {
  """A list of `LinksRecursive` objects."""
  nodes: [LinksRecursive!]!

  """
  A list of edges which contains the `LinksRecursive` and cursor to aid in pagination.
  """
  edges: [LinksRecursivesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LinksRecursive` you could get from the connection."""
  totalCount: Int!
}

type LinksRecursive {
  id: BigInt
  fromMarkerId: BigInt
  toMarkerId: BigInt
  props: JSON
  depth: Int

  """Reads a single `Marker` that is related to this `LinksRecursive`."""
  toMarker: Marker

  """Reads a single `Marker` that is related to this `LinksRecursive`."""
  fromMarker: Marker
}

"""A `LinksRecursive` edge in the connection."""
type LinksRecursivesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LinksRecursive` at the end of the edge."""
  node: LinksRecursive!
}

"""Methods to use when ordering `LinksRecursive`."""
enum LinksRecursivesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FROM_MARKER_ID_ASC
  FROM_MARKER_ID_DESC
  TO_MARKER_ID_ASC
  TO_MARKER_ID_DESC
  PROPS_ASC
  PROPS_DESC
  DEPTH_ASC
  DEPTH_DESC
}

"""
A condition to be used against `LinksRecursive` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LinksRecursiveCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `fromMarkerId` field."""
  fromMarkerId: BigInt

  """Checks for equality with the object’s `toMarkerId` field."""
  toMarkerId: BigInt

  """Checks for equality with the object’s `props` field."""
  props: JSON

  """Checks for equality with the object’s `depth` field."""
  depth: Int
}

"""
A filter to be used against `LinksRecursive` object types. All fields are combined with a logical ‘and.’
"""
input LinksRecursiveFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `fromMarkerId` field."""
  fromMarkerId: BigIntFilter

  """Filter by the object’s `toMarkerId` field."""
  toMarkerId: BigIntFilter

  """Filter by the object’s `props` field."""
  props: JSONFilter

  """Filter by the object’s `depth` field."""
  depth: IntFilter

  """Checks for all expressions in this list."""
  and: [LinksRecursiveFilter!]

  """Checks for any expressions in this list."""
  or: [LinksRecursiveFilter!]

  """Negates the expression."""
  not: LinksRecursiveFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""A `MarkerItem` edge in the connection."""
type MarkerItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MarkerItem` at the end of the edge."""
  node: MarkerItem!
}

"""A connection to a list of `PlayerItem` values."""
type PlayerItemsConnection {
  """A list of `PlayerItem` objects."""
  nodes: [PlayerItem!]!

  """
  A list of edges which contains the `PlayerItem` and cursor to aid in pagination.
  """
  edges: [PlayerItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PlayerItem` you could get from the connection."""
  totalCount: Int!
}

type PlayerItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  playerId: BigInt!
  itemId: BigInt!
  createdAt: Datetime
  props: JSON

  """Reads a single `Player` that is related to this `PlayerItem`."""
  player: Player

  """Reads a single `Item` that is related to this `PlayerItem`."""
  item: Item
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type Player implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  username: String!
  meta: JSON
  position: JSON
  fuel: Float!
  balance: BigFloat!
  lastFished: Datetime

  """Reads and enables pagination through a set of `PlayerItem`."""
  playerItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PlayerItem`."""
    orderBy: [PlayerItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlayerItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlayerItemFilter
  ): PlayerItemsConnection!

  """Reads and enables pagination through a set of `Message`."""
  messages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!
  package: PlayerItem
}

"""Methods to use when ordering `PlayerItem`."""
enum PlayerItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  ITEM_ID_ASC
  ITEM_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PROPS_ASC
  PROPS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PlayerItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PlayerItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `playerId` field."""
  playerId: BigInt

  """Checks for equality with the object’s `itemId` field."""
  itemId: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `props` field."""
  props: JSON
}

"""
A filter to be used against `PlayerItem` object types. All fields are combined with a logical ‘and.’
"""
input PlayerItemFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `playerId` field."""
  playerId: BigIntFilter

  """Filter by the object’s `itemId` field."""
  itemId: BigIntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `props` field."""
  props: JSONFilter

  """Checks for all expressions in this list."""
  and: [PlayerItemFilter!]

  """Checks for any expressions in this list."""
  or: [PlayerItemFilter!]

  """Negates the expression."""
  not: PlayerItemFilter
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""A connection to a list of `Message` values."""
type MessagesConnection {
  """A list of `Message` objects."""
  nodes: [Message!]!

  """
  A list of edges which contains the `Message` and cursor to aid in pagination.
  """
  edges: [MessagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Message` you could get from the connection."""
  totalCount: Int!
}

type Message implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  playerId: BigInt!
  message: String!
  meta: JSON
  createdAt: Datetime

  """Reads a single `Player` that is related to this `Message`."""
  player: Player
}

"""A `Message` edge in the connection."""
type MessagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Message` at the end of the edge."""
  node: Message!
}

"""Methods to use when ordering `Message`."""
enum MessagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  MESSAGE_ASC
  MESSAGE_DESC
  META_ASC
  META_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Message` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MessageCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `playerId` field."""
  playerId: BigInt

  """Checks for equality with the object’s `message` field."""
  message: String

  """Checks for equality with the object’s `meta` field."""
  meta: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `Message` object types. All fields are combined with a logical ‘and.’
"""
input MessageFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `playerId` field."""
  playerId: BigIntFilter

  """Filter by the object’s `message` field."""
  message: StringFilter

  """Filter by the object’s `meta` field."""
  meta: JSONFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [MessageFilter!]

  """Checks for any expressions in this list."""
  or: [MessageFilter!]

  """Negates the expression."""
  not: MessageFilter
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""A `PlayerItem` edge in the connection."""
type PlayerItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PlayerItem` at the end of the edge."""
  node: PlayerItem!
}

"""A `Item` edge in the connection."""
type ItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Item` at the end of the edge."""
  node: Item!
}

"""Methods to use when ordering `Item`."""
enum ItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ITEM_KEY_ASC
  ITEM_KEY_DESC
  NAME_ASC
  NAME_DESC
  TYPE_ASC
  TYPE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRICE_ASC
  PRICE_DESC
  PROPS_ASC
  PROPS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Item` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `itemKey` field."""
  itemKey: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `price` field."""
  price: BigFloat

  """Checks for equality with the object’s `props` field."""
  props: JSON
}

"""
A filter to be used against `Item` object types. All fields are combined with a logical ‘and.’
"""
input ItemFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `itemKey` field."""
  itemKey: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `price` field."""
  price: BigFloatFilter

  """Filter by the object’s `props` field."""
  props: JSONFilter

  """Checks for all expressions in this list."""
  and: [ItemFilter!]

  """Checks for any expressions in this list."""
  or: [ItemFilter!]

  """Negates the expression."""
  not: ItemFilter
}

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """Not included in the specified list."""
  notIn: [BigFloat!]

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat
}

"""A connection to a list of `Marker` values."""
type MarkersConnection {
  """A list of `Marker` objects."""
  nodes: [Marker!]!

  """
  A list of edges which contains the `Marker` and cursor to aid in pagination.
  """
  edges: [MarkersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Marker` you could get from the connection."""
  totalCount: Int!
}

"""A `Marker` edge in the connection."""
type MarkersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Marker` at the end of the edge."""
  node: Marker!
}

"""Methods to use when ordering `Marker`."""
enum MarkersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POSITION_ASC
  POSITION_DESC
  RADIUS_ASC
  RADIUS_DESC
  TYPE_ASC
  TYPE_DESC
  PROPS_ASC
  PROPS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Marker` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MarkerCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `position` field."""
  position: JSON

  """Checks for equality with the object’s `radius` field."""
  radius: BigFloat

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `props` field."""
  props: JSON
}

"""
A filter to be used against `Marker` object types. All fields are combined with a logical ‘and.’
"""
input MarkerFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `position` field."""
  position: JSONFilter

  """Filter by the object’s `radius` field."""
  radius: BigFloatFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `props` field."""
  props: JSONFilter

  """Checks for all expressions in this list."""
  and: [MarkerFilter!]

  """Checks for any expressions in this list."""
  or: [MarkerFilter!]

  """Negates the expression."""
  not: MarkerFilter
}

"""A connection to a list of `Player` values."""
type PlayersConnection {
  """A list of `Player` objects."""
  nodes: [Player!]!

  """
  A list of edges which contains the `Player` and cursor to aid in pagination.
  """
  edges: [PlayersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Player` you could get from the connection."""
  totalCount: Int!
}

"""A `Player` edge in the connection."""
type PlayersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Player` at the end of the edge."""
  node: Player!
}

"""Methods to use when ordering `Player`."""
enum PlayersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  META_ASC
  META_DESC
  POSITION_ASC
  POSITION_DESC
  FUEL_ASC
  FUEL_DESC
  BALANCE_ASC
  BALANCE_DESC
  LAST_FISHED_ASC
  LAST_FISHED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Player` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PlayerCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `meta` field."""
  meta: JSON

  """Checks for equality with the object’s `position` field."""
  position: JSON

  """Checks for equality with the object’s `fuel` field."""
  fuel: Float

  """Checks for equality with the object’s `balance` field."""
  balance: BigFloat

  """Checks for equality with the object’s `lastFished` field."""
  lastFished: Datetime
}

"""
A filter to be used against `Player` object types. All fields are combined with a logical ‘and.’
"""
input PlayerFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `meta` field."""
  meta: JSONFilter

  """Filter by the object’s `position` field."""
  position: JSONFilter

  """Filter by the object’s `fuel` field."""
  fuel: FloatFilter

  """Filter by the object’s `balance` field."""
  balance: BigFloatFilter

  """Filter by the object’s `lastFished` field."""
  lastFished: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [PlayerFilter!]

  """Checks for any expressions in this list."""
  or: [PlayerFilter!]

  """Negates the expression."""
  not: PlayerFilter
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
}

"""A connection to a list of `NearbyPlayer` values."""
type NearbyPlayersConnection {
  """A list of `NearbyPlayer` objects."""
  nodes: [NearbyPlayer!]!

  """
  A list of edges which contains the `NearbyPlayer` and cursor to aid in pagination.
  """
  edges: [NearbyPlayersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `NearbyPlayer` you could get from the connection."""
  totalCount: Int!
}

type NearbyPlayer {
  playerId: Int
  distance: Float

  """Reads a single `Player` that is related to this `NearbyPlayer`."""
  player: Player
}

"""A `NearbyPlayer` edge in the connection."""
type NearbyPlayersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NearbyPlayer` at the end of the edge."""
  node: NearbyPlayer!
}

"""
A filter to be used against `NearbyPlayer` object types. All fields are combined with a logical ‘and.’
"""
input NearbyPlayerFilter {
  """Filter by the object’s `playerId` field."""
  playerId: IntFilter

  """Filter by the object’s `distance` field."""
  distance: FloatFilter

  """Checks for all expressions in this list."""
  and: [NearbyPlayerFilter!]

  """Checks for any expressions in this list."""
  or: [NearbyPlayerFilter!]

  """Negates the expression."""
  not: NearbyPlayerFilter
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Item`."""
  createItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItemInput!
  ): CreateItemPayload

  """Creates a single `Link`."""
  createLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLinkInput!
  ): CreateLinkPayload

  """Creates a single `MarkerItem`."""
  createMarkerItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMarkerItemInput!
  ): CreateMarkerItemPayload

  """Creates a single `Marker`."""
  createMarker(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMarkerInput!
  ): CreateMarkerPayload

  """Creates a single `Message`."""
  createMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMessageInput!
  ): CreateMessagePayload

  """Creates a single `PlayerItem`."""
  createPlayerItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlayerItemInput!
  ): CreatePlayerItemPayload

  """Creates a single `Player`."""
  createPlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlayerInput!
  ): CreatePlayerPayload

  """Updates a single `Item` using its globally unique id and a patch."""
  updateItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemByNodeIdInput!
  ): UpdateItemPayload

  """Updates a single `Item` using a unique key and a patch."""
  updateItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemInput!
  ): UpdateItemPayload

  """Updates a single `Link` using its globally unique id and a patch."""
  updateLinkByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLinkByNodeIdInput!
  ): UpdateLinkPayload

  """Updates a single `Link` using a unique key and a patch."""
  updateLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLinkInput!
  ): UpdateLinkPayload

  """Updates a single `Link` using a unique key and a patch."""
  updateLinkByFromMarkerIdAndToMarkerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLinkByFromMarkerIdAndToMarkerIdInput!
  ): UpdateLinkPayload

  """Updates a single `Marker` using its globally unique id and a patch."""
  updateMarkerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMarkerByNodeIdInput!
  ): UpdateMarkerPayload

  """Updates a single `Marker` using a unique key and a patch."""
  updateMarker(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMarkerInput!
  ): UpdateMarkerPayload

  """Updates a single `Message` using its globally unique id and a patch."""
  updateMessageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessageByNodeIdInput!
  ): UpdateMessagePayload

  """Updates a single `Message` using a unique key and a patch."""
  updateMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessageInput!
  ): UpdateMessagePayload

  """
  Updates a single `PlayerItem` using its globally unique id and a patch.
  """
  updatePlayerItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerItemByNodeIdInput!
  ): UpdatePlayerItemPayload

  """Updates a single `PlayerItem` using a unique key and a patch."""
  updatePlayerItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerItemInput!
  ): UpdatePlayerItemPayload

  """Updates a single `Player` using its globally unique id and a patch."""
  updatePlayerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerByNodeIdInput!
  ): UpdatePlayerPayload

  """Updates a single `Player` using a unique key and a patch."""
  updatePlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerInput!
  ): UpdatePlayerPayload

  """Deletes a single `Item` using its globally unique id."""
  deleteItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemByNodeIdInput!
  ): DeleteItemPayload

  """Deletes a single `Item` using a unique key."""
  deleteItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemInput!
  ): DeleteItemPayload

  """Deletes a single `Link` using its globally unique id."""
  deleteLinkByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLinkByNodeIdInput!
  ): DeleteLinkPayload

  """Deletes a single `Link` using a unique key."""
  deleteLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLinkInput!
  ): DeleteLinkPayload

  """Deletes a single `Link` using a unique key."""
  deleteLinkByFromMarkerIdAndToMarkerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLinkByFromMarkerIdAndToMarkerIdInput!
  ): DeleteLinkPayload

  """Deletes a single `Marker` using its globally unique id."""
  deleteMarkerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMarkerByNodeIdInput!
  ): DeleteMarkerPayload

  """Deletes a single `Marker` using a unique key."""
  deleteMarker(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMarkerInput!
  ): DeleteMarkerPayload

  """Deletes a single `Message` using its globally unique id."""
  deleteMessageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessageByNodeIdInput!
  ): DeleteMessagePayload

  """Deletes a single `Message` using a unique key."""
  deleteMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessageInput!
  ): DeleteMessagePayload

  """Deletes a single `PlayerItem` using its globally unique id."""
  deletePlayerItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerItemByNodeIdInput!
  ): DeletePlayerItemPayload

  """Deletes a single `PlayerItem` using a unique key."""
  deletePlayerItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerItemInput!
  ): DeletePlayerItemPayload

  """Deletes a single `Player` using its globally unique id."""
  deletePlayerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerByNodeIdInput!
  ): DeletePlayerPayload

  """Deletes a single `Player` using a unique key."""
  deletePlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerInput!
  ): DeletePlayerPayload
  calculateFuelConsumed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CalculateFuelConsumedInput!
  ): CalculateFuelConsumedPayload
  deliverPackage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeliverPackageInput!
  ): DeliverPackagePayload
  equipItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: EquipItemInput!
  ): EquipItemPayload
  fish(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: FishInput!
  ): FishPayload
  operateLock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: OperateLockInput!
  ): OperateLockPayload
  pickupPackage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PickupPackageInput!
  ): PickupPackagePayload
  playerMarkers(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PlayerMarkersInput!
  ): PlayerMarkersPayload
  purchaseItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PurchaseItemInput!
  ): PurchaseItemPayload
  refuel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RefuelInput!
  ): RefuelPayload
  sellItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SellItemInput!
  ): SellItemPayload
  unequipItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UnequipItemInput!
  ): UnequipItemPayload
}

"""The output of our create `Item` mutation."""
type CreateItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was created by this mutation."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge
}

"""All input for the create `Item` mutation."""
input CreateItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Item` to be created by this mutation."""
  item: ItemInput!
}

"""An input for mutations affecting `Item`"""
input ItemInput {
  id: BigInt
  itemKey: String!
  name: String!
  type: String
  description: String
  price: BigFloat
  props: JSON
}

"""The output of our create `Link` mutation."""
type CreateLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Link` that was created by this mutation."""
  link: Link

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Marker` that is related to this `Link`."""
  fromMarker: Marker

  """Reads a single `Marker` that is related to this `Link`."""
  toMarker: Marker

  """An edge for our `Link`. May be used by Relay 1."""
  linkEdge(
    """The method to use when ordering `Link`."""
    orderBy: [LinksOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinksEdge
}

"""All input for the create `Link` mutation."""
input CreateLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Link` to be created by this mutation."""
  link: LinkInput!
}

"""An input for mutations affecting `Link`"""
input LinkInput {
  id: BigInt
  fromMarkerId: BigInt!
  toMarkerId: BigInt!
  props: JSON
}

"""The output of our create `MarkerItem` mutation."""
type CreateMarkerItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MarkerItem` that was created by this mutation."""
  markerItem: MarkerItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Marker` that is related to this `MarkerItem`."""
  marker: Marker

  """Reads a single `Item` that is related to this `MarkerItem`."""
  item: Item

  """An edge for our `MarkerItem`. May be used by Relay 1."""
  markerItemEdge(
    """The method to use when ordering `MarkerItem`."""
    orderBy: [MarkerItemsOrderBy!] = [NATURAL]
  ): MarkerItemsEdge
}

"""All input for the create `MarkerItem` mutation."""
input CreateMarkerItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MarkerItem` to be created by this mutation."""
  markerItem: MarkerItemInput!
}

"""An input for mutations affecting `MarkerItem`"""
input MarkerItemInput {
  markerId: BigInt!
  itemId: BigInt!
  props: JSON
}

"""The output of our create `Marker` mutation."""
type CreateMarkerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Marker` that was created by this mutation."""
  marker: Marker

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Marker`. May be used by Relay 1."""
  markerEdge(
    """The method to use when ordering `Marker`."""
    orderBy: [MarkersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MarkersEdge
}

"""All input for the create `Marker` mutation."""
input CreateMarkerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Marker` to be created by this mutation."""
  marker: MarkerInput!
}

"""An input for mutations affecting `Marker`"""
input MarkerInput {
  id: BigInt
  position: JSON!
  radius: BigFloat
  type: String
  props: JSON
}

"""The output of our create `Message` mutation."""
type CreateMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Message` that was created by this mutation."""
  message: Message

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `Message`."""
  player: Player

  """An edge for our `Message`. May be used by Relay 1."""
  messageEdge(
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

"""All input for the create `Message` mutation."""
input CreateMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Message` to be created by this mutation."""
  message: MessageInput!
}

"""An input for mutations affecting `Message`"""
input MessageInput {
  id: BigInt
  playerId: BigInt!
  message: String!
  meta: JSON
  createdAt: Datetime
}

"""The output of our create `PlayerItem` mutation."""
type CreatePlayerItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlayerItem` that was created by this mutation."""
  playerItem: PlayerItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `PlayerItem`."""
  player: Player

  """Reads a single `Item` that is related to this `PlayerItem`."""
  item: Item

  """An edge for our `PlayerItem`. May be used by Relay 1."""
  playerItemEdge(
    """The method to use when ordering `PlayerItem`."""
    orderBy: [PlayerItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayerItemsEdge
}

"""All input for the create `PlayerItem` mutation."""
input CreatePlayerItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PlayerItem` to be created by this mutation."""
  playerItem: PlayerItemInput!
}

"""An input for mutations affecting `PlayerItem`"""
input PlayerItemInput {
  id: BigInt
  playerId: BigInt!
  itemId: BigInt!
  createdAt: Datetime
  props: JSON
}

"""The output of our create `Player` mutation."""
type CreatePlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Player` that was created by this mutation."""
  player: Player

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Player`. May be used by Relay 1."""
  playerEdge(
    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayersEdge
}

"""All input for the create `Player` mutation."""
input CreatePlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Player` to be created by this mutation."""
  player: PlayerInput!
}

"""An input for mutations affecting `Player`"""
input PlayerInput {
  id: BigInt
  username: String!
  meta: JSON
  position: JSON
  fuel: Float
  balance: BigFloat
  lastFished: Datetime
}

"""The output of our update `Item` mutation."""
type UpdateItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was updated by this mutation."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge
}

"""All input for the `updateItemByNodeId` mutation."""
input UpdateItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Item` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Item` being updated.
  """
  patch: ItemPatch!
}

"""Represents an update to a `Item`. Fields that are set will be updated."""
input ItemPatch {
  id: BigInt
  itemKey: String
  name: String
  type: String
  description: String
  price: BigFloat
  props: JSON
}

"""All input for the `updateItem` mutation."""
input UpdateItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Item` being updated.
  """
  patch: ItemPatch!
  id: BigInt!
}

"""The output of our update `Link` mutation."""
type UpdateLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Link` that was updated by this mutation."""
  link: Link

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Marker` that is related to this `Link`."""
  fromMarker: Marker

  """Reads a single `Marker` that is related to this `Link`."""
  toMarker: Marker

  """An edge for our `Link`. May be used by Relay 1."""
  linkEdge(
    """The method to use when ordering `Link`."""
    orderBy: [LinksOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinksEdge
}

"""All input for the `updateLinkByNodeId` mutation."""
input UpdateLinkByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Link` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Link` being updated.
  """
  patch: LinkPatch!
}

"""Represents an update to a `Link`. Fields that are set will be updated."""
input LinkPatch {
  id: BigInt
  fromMarkerId: BigInt
  toMarkerId: BigInt
  props: JSON
}

"""All input for the `updateLink` mutation."""
input UpdateLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Link` being updated.
  """
  patch: LinkPatch!
  id: BigInt!
}

"""All input for the `updateLinkByFromMarkerIdAndToMarkerId` mutation."""
input UpdateLinkByFromMarkerIdAndToMarkerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Link` being updated.
  """
  patch: LinkPatch!
  fromMarkerId: BigInt!
  toMarkerId: BigInt!
}

"""The output of our update `Marker` mutation."""
type UpdateMarkerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Marker` that was updated by this mutation."""
  marker: Marker

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Marker`. May be used by Relay 1."""
  markerEdge(
    """The method to use when ordering `Marker`."""
    orderBy: [MarkersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MarkersEdge
}

"""All input for the `updateMarkerByNodeId` mutation."""
input UpdateMarkerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Marker` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Marker` being updated.
  """
  patch: MarkerPatch!
}

"""
Represents an update to a `Marker`. Fields that are set will be updated.
"""
input MarkerPatch {
  id: BigInt
  position: JSON
  radius: BigFloat
  type: String
  props: JSON
}

"""All input for the `updateMarker` mutation."""
input UpdateMarkerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Marker` being updated.
  """
  patch: MarkerPatch!
  id: BigInt!
}

"""The output of our update `Message` mutation."""
type UpdateMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Message` that was updated by this mutation."""
  message: Message

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `Message`."""
  player: Player

  """An edge for our `Message`. May be used by Relay 1."""
  messageEdge(
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

"""All input for the `updateMessageByNodeId` mutation."""
input UpdateMessageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Message` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Message` being updated.
  """
  patch: MessagePatch!
}

"""
Represents an update to a `Message`. Fields that are set will be updated.
"""
input MessagePatch {
  id: BigInt
  playerId: BigInt
  message: String
  meta: JSON
  createdAt: Datetime
}

"""All input for the `updateMessage` mutation."""
input UpdateMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Message` being updated.
  """
  patch: MessagePatch!
  id: BigInt!
}

"""The output of our update `PlayerItem` mutation."""
type UpdatePlayerItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlayerItem` that was updated by this mutation."""
  playerItem: PlayerItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `PlayerItem`."""
  player: Player

  """Reads a single `Item` that is related to this `PlayerItem`."""
  item: Item

  """An edge for our `PlayerItem`. May be used by Relay 1."""
  playerItemEdge(
    """The method to use when ordering `PlayerItem`."""
    orderBy: [PlayerItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayerItemsEdge
}

"""All input for the `updatePlayerItemByNodeId` mutation."""
input UpdatePlayerItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlayerItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PlayerItem` being updated.
  """
  patch: PlayerItemPatch!
}

"""
Represents an update to a `PlayerItem`. Fields that are set will be updated.
"""
input PlayerItemPatch {
  id: BigInt
  playerId: BigInt
  itemId: BigInt
  createdAt: Datetime
  props: JSON
}

"""All input for the `updatePlayerItem` mutation."""
input UpdatePlayerItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PlayerItem` being updated.
  """
  patch: PlayerItemPatch!
  id: BigInt!
}

"""The output of our update `Player` mutation."""
type UpdatePlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Player` that was updated by this mutation."""
  player: Player

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Player`. May be used by Relay 1."""
  playerEdge(
    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayersEdge
}

"""All input for the `updatePlayerByNodeId` mutation."""
input UpdatePlayerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Player` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Player` being updated.
  """
  patch: PlayerPatch!
}

"""
Represents an update to a `Player`. Fields that are set will be updated.
"""
input PlayerPatch {
  id: BigInt
  username: String
  meta: JSON
  position: JSON
  fuel: Float
  balance: BigFloat
  lastFished: Datetime
}

"""All input for the `updatePlayer` mutation."""
input UpdatePlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Player` being updated.
  """
  patch: PlayerPatch!
  id: BigInt!
}

"""The output of our delete `Item` mutation."""
type DeleteItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was deleted by this mutation."""
  item: Item
  deletedItemNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge
}

"""All input for the `deleteItemByNodeId` mutation."""
input DeleteItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Item` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteItem` mutation."""
input DeleteItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Link` mutation."""
type DeleteLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Link` that was deleted by this mutation."""
  link: Link
  deletedLinkNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Marker` that is related to this `Link`."""
  fromMarker: Marker

  """Reads a single `Marker` that is related to this `Link`."""
  toMarker: Marker

  """An edge for our `Link`. May be used by Relay 1."""
  linkEdge(
    """The method to use when ordering `Link`."""
    orderBy: [LinksOrderBy!] = [PRIMARY_KEY_ASC]
  ): LinksEdge
}

"""All input for the `deleteLinkByNodeId` mutation."""
input DeleteLinkByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Link` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLink` mutation."""
input DeleteLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteLinkByFromMarkerIdAndToMarkerId` mutation."""
input DeleteLinkByFromMarkerIdAndToMarkerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fromMarkerId: BigInt!
  toMarkerId: BigInt!
}

"""The output of our delete `Marker` mutation."""
type DeleteMarkerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Marker` that was deleted by this mutation."""
  marker: Marker
  deletedMarkerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Marker`. May be used by Relay 1."""
  markerEdge(
    """The method to use when ordering `Marker`."""
    orderBy: [MarkersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MarkersEdge
}

"""All input for the `deleteMarkerByNodeId` mutation."""
input DeleteMarkerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Marker` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMarker` mutation."""
input DeleteMarkerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Message` mutation."""
type DeleteMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Message` that was deleted by this mutation."""
  message: Message
  deletedMessageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `Message`."""
  player: Player

  """An edge for our `Message`. May be used by Relay 1."""
  messageEdge(
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

"""All input for the `deleteMessageByNodeId` mutation."""
input DeleteMessageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Message` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMessage` mutation."""
input DeleteMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `PlayerItem` mutation."""
type DeletePlayerItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlayerItem` that was deleted by this mutation."""
  playerItem: PlayerItem
  deletedPlayerItemNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `PlayerItem`."""
  player: Player

  """Reads a single `Item` that is related to this `PlayerItem`."""
  item: Item

  """An edge for our `PlayerItem`. May be used by Relay 1."""
  playerItemEdge(
    """The method to use when ordering `PlayerItem`."""
    orderBy: [PlayerItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayerItemsEdge
}

"""All input for the `deletePlayerItemByNodeId` mutation."""
input DeletePlayerItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlayerItem` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlayerItem` mutation."""
input DeletePlayerItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Player` mutation."""
type DeletePlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Player` that was deleted by this mutation."""
  player: Player
  deletedPlayerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Player`. May be used by Relay 1."""
  playerEdge(
    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayersEdge
}

"""All input for the `deletePlayerByNodeId` mutation."""
input DeletePlayerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Player` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlayer` mutation."""
input DeletePlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our `calculateFuelConsumed` mutation."""
type CalculateFuelConsumedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  float: Float

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `calculateFuelConsumed` mutation."""
input CalculateFuelConsumedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  distance: Float
}

"""The output of our `deliverPackage` mutation."""
type DeliverPackagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  player: Player

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Player`. May be used by Relay 1."""
  playerEdge(
    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayersEdge
}

"""All input for the `deliverPackage` mutation."""
input DeliverPackageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: Int
}

"""The output of our `equipItem` mutation."""
type EquipItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  player: Player

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Player`. May be used by Relay 1."""
  playerEdge(
    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayersEdge
}

"""All input for the `equipItem` mutation."""
input EquipItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: Int
  playerItemId: Int
}

"""The output of our `fish` mutation."""
type FishPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  playerItem: PlayerItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `PlayerItem`."""
  player: Player

  """Reads a single `Item` that is related to this `PlayerItem`."""
  item: Item

  """An edge for our `PlayerItem`. May be used by Relay 1."""
  playerItemEdge(
    """The method to use when ordering `PlayerItem`."""
    orderBy: [PlayerItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayerItemsEdge
}

"""All input for the `fish` mutation."""
input FishInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: Int
}

"""The output of our `operateLock` mutation."""
type OperateLockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  marker: Marker

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Marker`. May be used by Relay 1."""
  markerEdge(
    """The method to use when ordering `Marker`."""
    orderBy: [MarkersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MarkersEdge
}

"""All input for the `operateLock` mutation."""
input OperateLockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: Int
}

"""The output of our `pickupPackage` mutation."""
type PickupPackagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  player: Player

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Player`. May be used by Relay 1."""
  playerEdge(
    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayersEdge
}

"""All input for the `pickupPackage` mutation."""
input PickupPackageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: Int
}

"""The output of our `playerMarkers` mutation."""
type PlayerMarkersPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  results: [PlayerMarkersRecord]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The return type of our `playerMarkers` mutation."""
type PlayerMarkersRecord {
  markerId: Int
  markerDistance: Float
}

"""All input for the `playerMarkers` mutation."""
input PlayerMarkersInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: Int
  markerType: String
  markerDistanceLimit: Float
}

"""The output of our `purchaseItem` mutation."""
type PurchaseItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  playerItem: PlayerItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `PlayerItem`."""
  player: Player

  """Reads a single `Item` that is related to this `PlayerItem`."""
  item: Item

  """An edge for our `PlayerItem`. May be used by Relay 1."""
  playerItemEdge(
    """The method to use when ordering `PlayerItem`."""
    orderBy: [PlayerItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayerItemsEdge
}

"""All input for the `purchaseItem` mutation."""
input PurchaseItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: Int
  itemId: Int
}

"""The output of our `refuel` mutation."""
type RefuelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  player: Player

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Player`. May be used by Relay 1."""
  playerEdge(
    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayersEdge
}

"""All input for the `refuel` mutation."""
input RefuelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: Int
}

"""The output of our `sellItem` mutation."""
type SellItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  player: Player

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Player`. May be used by Relay 1."""
  playerEdge(
    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayersEdge
}

"""All input for the `sellItem` mutation."""
input SellItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  markerId: Int
  playerItemId: Int
}

"""The output of our `unequipItem` mutation."""
type UnequipItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  player: Player

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Player`. May be used by Relay 1."""
  playerEdge(
    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayersEdge
}

"""All input for the `unequipItem` mutation."""
input UnequipItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: Int
  playerItemId: Int
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  listen(topic: String!): ListenPayload!
}

type ListenPayload {
  """
  Our root query field type. Allows us to run any query from our subscription payload.
  """
  query: Query
  relatedNode: Node
  relatedNodeId: ID
}
